// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/person.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// protoc --dart_out=./lib ./protos/person.proto
// protoc --swift_out=./ios/Classes ./protos/person.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Province: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case nl // = 0
  case pe // = 1
  case ns // = 2
  case nb // = 3
  case qc // = 4
  case on // = 5
  case mb // = 6
  case sk // = 7
  case ab // = 8
  case bc // = 9
  case yt // = 10
  case nt // = 11
  case nu // = 12
  case UNRECOGNIZED(Int)

  init() {
    self = .nl
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .nl
    case 1: self = .pe
    case 2: self = .ns
    case 3: self = .nb
    case 4: self = .qc
    case 5: self = .on
    case 6: self = .mb
    case 7: self = .sk
    case 8: self = .ab
    case 9: self = .bc
    case 10: self = .yt
    case 11: self = .nt
    case 12: self = .nu
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .nl: return 0
    case .pe: return 1
    case .ns: return 2
    case .nb: return 3
    case .qc: return 4
    case .on: return 5
    case .mb: return 6
    case .sk: return 7
    case .ab: return 8
    case .bc: return 9
    case .yt: return 10
    case .nt: return 11
    case .nu: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Province: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Province] = [
    .nl,
    .pe,
    .ns,
    .nb,
    .qc,
    .on,
    .mb,
    .sk,
    .ab,
    .bc,
    .yt,
    .nt,
    .nu,
  ]
}

#endif  // swift(>=4.2)

struct Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var addressesList: [Address] = []

  var childrenList: [Person] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var streetName: String = String()

  var city: String = String()

  var province: Province = .nl

  var postalCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Province: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NL"),
    1: .same(proto: "PE"),
    2: .same(proto: "NS"),
    3: .same(proto: "NB"),
    4: .same(proto: "QC"),
    5: .same(proto: "ON"),
    6: .same(proto: "MB"),
    7: .same(proto: "SK"),
    8: .same(proto: "AB"),
    9: .same(proto: "BC"),
    10: .same(proto: "YT"),
    11: .same(proto: "NT"),
    12: .same(proto: "NU"),
  ]
}

extension Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Person"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "addressesList"),
    3: .same(proto: "childrenList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.addressesList)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.childrenList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.addressesList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addressesList, fieldNumber: 2)
    }
    if !self.childrenList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.childrenList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Person, rhs: Person) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.addressesList != rhs.addressesList {return false}
    if lhs.childrenList != rhs.childrenList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Address"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "streetName"),
    2: .same(proto: "city"),
    3: .same(proto: "province"),
    4: .same(proto: "postalCode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.streetName)
      case 2: try decoder.decodeSingularStringField(value: &self.city)
      case 3: try decoder.decodeSingularEnumField(value: &self.province)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.postalCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.streetName.isEmpty {
      try visitor.visitSingularStringField(value: self.streetName, fieldNumber: 1)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 2)
    }
    if self.province != .nl {
      try visitor.visitSingularEnumField(value: self.province, fieldNumber: 3)
    }
    if self.postalCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.postalCode, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Address, rhs: Address) -> Bool {
    if lhs.streetName != rhs.streetName {return false}
    if lhs.city != rhs.city {return false}
    if lhs.province != rhs.province {return false}
    if lhs.postalCode != rhs.postalCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
